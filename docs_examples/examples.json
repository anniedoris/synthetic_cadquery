[
  {
    "title": "Simple Rectangular Plate",
    "description": "Just about the simplest possible example, a rectangular box.",
    "code_path": "example1.py"
  },
  {
    "title": "Plate with Hole",
    "description": "A rectangular box, but with a hole added. “>Z” selects the top most face of the resulting box. The hole is located in the center because the default origin of a working plane is the projected origin of the last Workplane, the last Workplane having origin at (0,0,0) the projection is at the center of the face. The default hole depth is through the entire part.",
    "code_path": "example2.py"
  },
  {
    "title": "An Extruded Prismatic Solid",
    "description": "Build a prismatic solid using extrusion. After a drawing operation, the center of the previous object is placed on the stack, and is the reference for the next operation. So in this case, the rect() is drawn centered on the previously draw circle. By default, rectangles and circles are centered around the previous working point.",
    "code_path": "example3.py"
  },
  {
    "title": "Building Profiles Using Lines and Arcs",
    "description": "Sometimes you need to build complex profiles using lines and arcs. This example builds a prismatic solid from 2D operations. 2D operations maintain a current point, which is initially at the origin. Use close() to finish a closed curve.",
    "code_path": "example4.py"
  },
  {
    "title": "Moving the Current Working Point",
    "description": "In this example, a closed profile is required, with some interior features as well. This example also demonstrates using multiple lines of code instead of longer chained commands, though of course in this case it was possible to do it in one long line as well. A new work plane center can be established at any point.",
    "code_path": "example5.py"
  },
  {
    "title": "Using Point Lists",
    "description": "Sometimes you need to create a number of features at various locations, and using Workplane.center() is too cumbersome. You can use a list of points to construct multiple objects at once. Most construction methods, like Workplane.circle() and Workplane.rect(), will operate on multiple points if they are on the stack.",
    "code_path": "example6.py"
  },
  {
    "title": "Polygons",
    "description": "You can create polygons for each stack point if you would like. Useful in 3d printers whose firmware does not correct for small hole sizes.",
    "code_path": "example7.py"
  },
  {
    "title": "Polylines",
    "description": "Workplane.polyline() allows creating a shape from a large number of chained points connected by lines.",
    "code_path": "example8.py"
  },
  {
    "title": "Defining an Edge with a Spline",
    "description": "This example defines a side using a spline curve through a collection of points. Useful when you have an edge that needs a complex profile.",
    "code_path": "example9.py"
  },
  {
    "title": "Mirroring Symmetric Geometry",
    "description": "You can mirror 2D geometry when your shape is symmetric. In this example we also introduce horizontal and vertical lines, which make for slightly easier coding.",
    "code_path": "example10.py"
  },
  {
    "title": "Mirroring 3D Objects",
    "description": "This example demonstrates how to mirror complex 3D geometry using various 2D sketching operations followed by extrusion and 3D transformations. It includes techniques such as rotating, translating to center the object, and mirroring along different planes to create symmetric duplicates.",
    "code_path": "example11.py"
  },
  {
    "title": "Creating Workplanes on Faces",
    "description": "This example shows how to locate a new workplane on the face of a previously created feature. Using workplanes in this way are a key feature of CadQuery. Unlike a typical 3d scripting language, using work planes frees you from tracking the position of various features in variables, and allows the model to adjust itself with removing redundant dimensions. The Workplane.faces() method allows you to select the faces of a resulting solid. It accepts a selector string or object, that allows you to target a single face, and make a workplane oriented on that face. Keep in mind that by default the origin of a new workplane is calculated by forming a plane from the selected face and projecting the previous origin onto that plane. This behaviour can be changed through the centerOption argument of Workplane.workplane().",
    "code_path": "example12.py"
  },
  {
    "title": "Locating a Workplane on a Vertex",
    "description": "Normally, the Workplane.workplane() method requires a face to be selected. But if a vertex is selected immediately after a face, Workplane.workplane() with the centerOption argument set to CenterOfMass will locate the workplane on the face, with the origin at the vertex instead of at the center of the face\n\nThe example also introduces Workplane.cutThruAll(), which makes a cut through the entire part, no matter how deep the part is.",
    "code_path": "example13.py"
  },
  {
    "title": "Offset Workplanes",
    "description": "Workplanes do not have to lie exactly on a face. When you make a workplane, you can define it at an offset from an existing face.\n\nThis example uses an offset workplane to make a compound object, which is perfectly valid!",
    "code_path": "example14.py"
  },
  {
    "title": "Copying Workplanes",
    "description": "An existing CQ object can copy a workplane from another CQ object.",
    "code_path": "example15.py"
  },
  {
    "title": "Rotated Workplanes",
    "description": "You can create a rotated work plane by specifying angles of rotation relative to another workplane",
    "code_path": "example16.py"
  },
  {
    "title": "Using Construction Geometry",
    "description": "You can draw shapes to use the vertices as points to locate other features. Features that are used to locate other features, rather than to create them, are called Construction Geometry\n\nIn the example below, a rectangle is drawn, and its vertices are used to locate a set of holes.",
    "code_path": "example17.py"
  },
  {
    "title": "Shelling To Create Thin Features 1",
    "description": "Shelling converts a solid object into a shell of uniform thickness.\n\nTo shell an object and ‘hollow out’ the inside pass a negative thickness parameter to the Workplane.shell() method of a shape.",
    "code_path": "example18.py"
  },
  {
    "title": "Shelling To Create Thin Features 2",
    "description": "Shelling converts a solid object into a shell of uniform thickness.\n\nTo shell an object and ‘hollow out’ the inside pass a negative thickness parameter to the Workplane.shell() method of a shape. A positive thickness parameter wraps an object with filleted outside edges and the original object will be the ‘hollowed out’ portion.",
    "code_path": "example19.py"
  },
  {
    "title": "Shelling To Create Thin Features 3",
    "description": "Shelling converts a solid object into a shell of uniform thickness.\n\nTo shell an object and ‘hollow out’ the inside pass a negative thickness parameter to the Workplane.shell() method of a shape. A positive thickness parameter wraps an object with filleted outside edges and the original object will be the ‘hollowed out’ portion. Use face selectors to select a face to be removed from the resulting hollow shape.",
    "code_path": "example20.py"
  },
  {
    "title": "Making Lofts",
    "description": "A loft is a solid swept through a set of wires. This example creates lofted section between a rectangle and a circular section.",
    "code_path": "example21.py"
  },
  {
    "title": "Extruding Until a Given Face 1",
    "description": "Sometimes you will want to extrude a wire until a given face that can be not planar or where you might not know easily the distance you have to extrude to. In such cases you can use next, last or even give a Face object for the until argument of extrude().",
    "code_path": "example22.py"
  },
  {
    "title": "Extruding Until a Given Face 2",
    "description": "Sometimes you will want to extrude a wire until a given face that can be not planar or where you might not know easily the distance you have to extrude to. In such cases you can use next, last or even give a Face object for the until argument of extrude(). The same behaviour is available with cutBlind() and as you can see it is also possible to work on several Wire objects at a time (the same is true for extrude()).",
    "code_path": "example23.py"
  },
  {
    "title": "Extruding Until a Given Face 3",
    "description": "Sometimes you will want to extrude a wire until a given face that can be not planar or where you might not know easily the distance you have to extrude to. In such cases you can use next, last or even give a Face object for the until argument of extrude(). The same behaviour is available with cutBlind() and as you can see it is also possible to work on several Wire objects at a time (the same is true for extrude()). Here is a typical situation where extruding and cuting until a given surface is very handy. It allows us to extrude or cut until a curved surface without overlapping issues. Warning: If the wire you want to extrude cannot be fully projected on the target surface, the result will be unpredictable. Furthermore, the algorithm in charge of finding the candidate faces does its search by counting all the faces intersected by a line created from your wire center along your extrusion direction. So make sure your wire can be projected on your target face to avoid unexpected behaviour.",
    "code_path": "example24.py"
  },
  {
    "title": "Making Counter-bored and Counter-sunk Holes",
    "description": "Counterbored and countersunk holes are so common that CadQuery creates macros to create them in a single step.\n\nSimilar to Workplane.hole(), these functions operate on a list of points as well as a single point.",
    "code_path": "example25.py"
  },
  {
    "title": "Offsetting Wires in 2D 1",
    "description": "Two dimensional wires can be transformed with Workplane.offset2D(). They can be offset inwards or outwards, and with different techniques for extending the corners.",
    "code_path": "example26.py"
  },
  {
    "title": "Offsetting Wires in 2D 2",
    "description": "Two dimensional wires can be transformed with Workplane.offset2D(). They can be offset inwards or outwards, and with different techniques for extending the corners. Using the forConstruction argument you can do the common task of offsetting a series of bolt holes from the outline of an object. Here is the counterbore example from above but with the bolt holes offset from the edges. Note that Workplane.edges() is for selecting objects. It does not add the selected edges to pending edges in the modelling context, because this would result in your next extrusion including everything you had only selected in addition to the lines you had drawn. To specify you want these edges to be used in Workplane.offset2D(), you call Workplane.toPending() to explicitly put them in the list of pending edges.",
    "code_path": "example27.py"
  },
  {
    "title": "Rounding Corners with Fillet",
    "description": "Filleting is done by selecting the edges of a solid, and using the fillet function.\n\nHere we fillet all of the edges of a simple plate.",
    "code_path": "example28.py"
  },
  {
    "title": "Tagging Objects 1",
    "description": "The Workplane.tag() method can be used to tag a particular object in the chain with a string, so that it can be referred to later in the chain.\n\nThe Workplane.workplaneFromTagged() method applies Workplane.copyWorkplane() to a tagged object. For example, when extruding two different solids from a surface, after the first solid is extruded it can become difficult to reselect the original surface with CadQuery’s other selectors.",
    "code_path": "example29.py"
  },
  {
    "title": "Tagging Objects 2",
    "description": "The Workplane.tag() method can be used to tag a particular object in the chain with a string, so that it can be referred to later in the chain.\n\nThe Workplane.workplaneFromTagged() method applies Workplane.copyWorkplane() to a tagged object. For example, when extruding two different solids from a surface, after the first solid is extruded it can become difficult to reselect the original surface with CadQuery’s other selectors. Tags can also be used with most selectors, including Workplane.vertices(), Workplane.faces(), Workplane.edges(), Workplane.wires(), Workplane.shells(), Workplane.solids() and Workplane.compounds().",
    "code_path": "example30.py"
  },
  {
    "title": "A Parametric Bearing Pillow Block",
    "description": "Combining a few basic functions, its possible to make a very good parametric bearing pillow block, with just a few lines of code.",
    "code_path": "example31.py"
  },
  {
    "title": "Splitting an Object",
    "description": "You can split an object using a workplane, and retain either or both halves",
    "code_path": "example32.py"
  },
  {
    "title": "The Classic OCC Bottle",
    "description": "CadQuery is based on the OpenCascade.org (OCC) modeling Kernel. Those who are familiar with OCC know about the famous ‘bottle’ example. The bottle example in the OCCT online documentation.\n\nA pythonOCC version is listed here.\n\nOf course one difference between this sample and the OCC version is the length. This sample is one of the longer ones at 13 lines, but that’s very short compared to the pythonOCC version, which is 10x longer!",
    "code_path": "example33.py"
  },
  {
    "title": "A Parametric Enclosure",
    "description": "",
    "code_path": "example34.py"
  },
  {
    "title": "Lego Brick",
    "description": "This script will produce any size regular rectangular Lego(TM) brick. Its only tricky because of the logic regarding the underside of the brick.",
    "code_path": "example35.py"
  },
  {
    "title": "Braille Example",
    "description": "",
    "code_path": "example36.py"
  },
  {
    "title": "Panel With Various Connector Holes",
    "description": "",
    "code_path": "example37.py"
  },
  {
    "title": "Cycloidal Gear",
    "description": "You can define complex geometries using the parametricCurve functionality. This specific examples generates a helical cycloidal gear.",
    "code_path": "example38.py"
  }
]
